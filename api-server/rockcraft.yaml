# Dockerfile: https://github.com/kubeflow/pipelines/blob/2.4.1/backend/Dockerfile
name: api-server
summary: An image for using Kubeflow pipelines API
description: An image for using Kubeflow pipelines API
version: "2.4.1"
base: ubuntu@22.04
license: Apache-2.0
platforms:
  amd64:
run-user: _daemon_
services:
  apiserver:
    override: merge
    summary: "pipelines api-server service"
    startup: disabled
    environment:
      LOG_LEVEL: "info"
    command: /bin/apiserver --config=/config --sampleconfig=/config/sample_config.json -logtostderr=true --logLevel=$LOG_LEVEL

# Adds Deadsnakes ppa package repo to install python3.8 interpreter
# Required when using a python version different from the default in the base
# Ref: https://documentation.ubuntu.com/rockcraft/en/latest/reference/plugins/python_plugin/#dependencies
package-repositories:
  - type: apt
    ppa: deadsnakes/ppa
    priority: always

parts:
  security-team-requirement:
    plugin: nil
    override-build: |
      mkdir -p ${CRAFT_PART_INSTALL}/usr/share/rocks
      (echo "# os-release" && cat /etc/os-release && echo "# dpkg-query" && dpkg-query -f '${db:Status-Abbrev},${binary:Package},${Version},${source:Package},${Source:Version}\n' -W) > ${CRAFT_PART_INSTALL}/usr/share/rocks/dpkg.query

  builder:
    plugin: go
    source: https://github.com/kubeflow/pipelines.git
    source-tag: 2.4.1
    build-snaps:
      - go/1.22/stable
    build-environment:
      - GO111MODULE: "on"
    build-packages:
      - cmake
      - clang
      - musl-dev
      - openssl
    override-build: |-
      go build -o apiserver backend/src/apiserver/*.go
      cp apiserver $CRAFT_STAGE
      cp -r backend/src/apiserver/config/ $CRAFT_STAGE/config
  
  # Compile and stage the sample pipelines
  compiler:
    plugin: nil
    source: https://github.com/kubeflow/pipelines.git
    source-tag: 2.4.1
    build-environment:
      - ARGO_VERSION: v3.4.17
    build-packages:
      - default-jdk
      - python3.9
      # required to build google-cloud-profiler wheel for pyproject.toml-based projects
      - python3.9-dev
      - python3.9-distutils
      - jq
      - wget

    override-build: |
      # Remove the source from the build directory so we don't
      # accidentally use the wrong requirements.txt or inputs
      # The build steps below copy everything that is needed to the working directory
      rm -rf ./*

      # Create a symbolic link so the rest of this script is like upstream
      ln -s /usr/bin/python3.9 python3
      PATH=.:$PATH

      # Setup pip
      wget https://bootstrap.pypa.io/get-pip.py && python3 get-pip.py

      cp $CRAFT_PART_SRC/backend/requirements.txt .
      python3 -m pip install -r requirements.txt --no-cache-dir

      # Fetch argo CLI
      # TODO: Is this used?
      curl -sLO https://github.com/argoproj/argo-workflows/releases/download/${ARGO_VERSION}/argo-linux-amd64.gz
      gunzip argo-linux-amd64.gz
      chmod +x argo-linux-amd64
      mv ./argo-linux-amd64 $CRAFT_PART_INSTALL/argo

      # Compile the sample pipelines
      cp -r $CRAFT_PART_SRC/samples ./samples
      cp $CRAFT_PART_SRC/backend/src/apiserver/config/sample_config.json ./samples/

      set -e; \
      < ./samples/sample_config.json jq .[].file --raw-output | while read pipeline_yaml; do \
      pipeline_py=".${pipeline_yaml%.yaml}"; \
      which python3; \
      python3 "$pipeline_py"; \
      done

      cp -r ./samples $CRAFT_STAGE/samples

  server:
    after: [builder, compiler]
    plugin: nil
    source: https://github.com/kubeflow/pipelines.git
    source-tag: 2.4.1
    build-packages:
      - ca-certificates
      - wget
    build-environment:
      # These are set at build in dockerfile (those are just links to examples)
      - COMMIT_SHA: unknown
      - TAG_NAME: unknown
    override-build: |
      cp -r $CRAFT_STAGE/config/ $CRAFT_PART_INSTALL/config
      mkdir -p $CRAFT_PART_INSTALL/bin
      cp $CRAFT_STAGE/apiserver $CRAFT_PART_INSTALL/bin/apiserver
      cp -r $CRAFT_STAGE/samples/ $CRAFT_PART_INSTALL/samples

      sed -E "s#/(blob|tree)/master/#/\1/${COMMIT_SHA}/#g" -i $CRAFT_PART_INSTALL/config/sample_config.json
      sed -E "s/%252Fmaster/%252F${COMMIT_SHA}/#g" -i $CRAFT_PART_INSTALL/config/sample_config.json
